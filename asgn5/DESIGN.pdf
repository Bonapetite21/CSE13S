Bonifacio Miranda
5/10/2021
CSE 13S

Encodes a txt messgae
encode.c
    #define OPTIONS "hi:o:"

    static void usage(char *exec) {
        fprintf(stderr,
            "SYNOPSIS\n"
            "  A Hamming(8, 4) systematic code generator.\n"
            "\n"
            "USAGE\n"
            "  %s ./encode [-h] [-i infile] [-o outfile]\n"
            "\n"
            "OPTIONS\n"
            "  -h             Program usage and help.\n"
            "  -i infile      Input data to encode."
            "  -o outfile     Output of encoded data.\n",
            exec);
    }

    //  Returns  the  lower  nibble  of val
    uint8_t  lower_nibble(uint8_t  val) {
        return  val & 0xF;
    }

    //  Returns  the  upper  nibble  of val
    uint8_t  upper_nibble(uint8_t  val) {
        return  val  >> 4;
    }

    int main(int argc, char **argv) {
        // Getting options from user to read, write and/or help menu 
        FILE *infile = stdin;
        FILE *outfile = stdout;
        int c = 0;
        while ((c = getopt(argc, argv, OPTIONS)) != -1) {
            switch (c) {
            case 'i': infile = fopen(optarg, "r"); break;
            case 'o': outfile = fopen(optarg, "w"); break;
            case 'h': usage(argv[0]); return EXIT_SUCCESS;
            default: usage(argv[0]); return EXIT_FAILURE;
            }
        }

        // Construct G = generator matrix
        BitMatrix *G = bm_create(4, 8);
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (i == j) {
                    bm_set_bit(G, i, j);
                }
            }
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 4; j < 8; j++) {
                if (i != j - 4) {
                    bm_set_bit(G, i, j);
                }
            }
        }


        While (every byte from the infile) {
            // Put encoded lower nible to outfile;
            // Put encoded upper nible to outfile;
        }
        // Close files and free memory;

        return EXIT_SUCCESS;
    }


Decodes a txt messgae
decode.c
    #define OPTIONS "hi:o:v"

    static void usage(char *exec) {
        fprintf(stderr,
            "SYNOPSIS\n"
            "  A Hamming(8, 4) systematic code decoder.\n"
            "\n"
            "USAGE\n"
            "  %s ./decode [-h] [-v] [-i infile] [-o outfile]\n"
            "\n"
            "OPTIONS\n"
            "  -h             Program usage and help.\n"
            "  -v             Print statistics of decoding to stderr.\n"
            "  -i infile      Input data to decode.\n"
            "  -o outfile     Output of decoded data.\n",
            exec);
    }

    //  Packs  two  nibbles  into a byte
    uint8_t  pack_byte(uint8_t  upper , uint8_t  lower) {
        return (upper  << 4) | (lower & 0xF);
    }

    int main(int argc, char **argv) {
        // Getting options from user to read, write and/or help menu 
        FILE *infile = stdin;
        FILE *outfile = stdout;
        int v = 0;
        int c = 0;
        while ((c = getopt(argc, argv, OPTIONS)) != -1) {
            switch (c) {
            case 'i': infile = fopen(optarg, "r"); break;
            case 'o': outfile = fopen(optarg, "w"); break;
            case 'v': v = 1; break;
            case 'h': usage(argv[0]); return EXIT_SUCCESS;
            default: usage(argv[0]); return EXIT_FAILURE;
            }
        }

        // Construct Ht = H transposed matrix
        BitMatrix *Ht = bm_create(8, 4);
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (i != j) {
                    bm_set_bit(Ht, i, j);
                }
            }
        }
        for (int i = 4; i < 8; i++) {
            for (int j = 0; j < 4; j++) {
                if (i - 4 == j) {
                    bm_set_bit(Ht, i, j);
                }
            }
        }

        While (every byte from the infile) {
            byte_u = fgetc(infile);
            uint8_t d_nibble_l;
            uint8_t d_nibble_u;
            HAM_STATUS s1 = ham_decode(Ht, byte_l, &d_nibble_l);
            HAM_STATUS s2 = ham_decode(Ht, byte_u, &d_nibble_u);
            fputc(pack_byte(d_nibble_u, d_nibble_l), outfile);
            if (s1 == HAM_ERR) {
                tot_uncorrected++;
            } else if (s1 == HAM_CORRECT) {
                tot_corrected++;
            }
            if (s2 == HAM_ERR) {
                tot_uncorrected++;
            } else if (s2 == HAM_CORRECT) {
                tot_corrected++;
            }
            tot_bytes_p += 2;
        }
        if (v == 1) {
            printf("Total bytes processed: %d\n", tot_bytes_p);
            printf("Uncorrected errors: %d\n", tot_uncorrected);
            printf("Corrrected errors: %d\n", tot_corrected);
            printf("Error rate: %f\n", (float) tot_uncorrected/ (float) tot_bytes_p);
        }
        // Close files and free memory;

        return EXIT_SUCCESS;
    }


Gives weights to values for checking how many errors
hamming.c
    uint8_t ham_encode(BitMatrix *G, uint8_t msg) {
        Get msg to BitMatrix;
        Get product of msg as BitMatrix and G;
        Covert product to encoded data; 
        Free memory;
        return encoded data;
    }

    //  Returns  the  lower  nibble  of val
    static uint8_t lower_nibble(uint8_t  val) {
        return  val & 0xF;
    }

    HAM_STATUS ham_decode(BitMatrix *Ht, uint8_t code, uint8_t *msg) {
        Get code as BitMatrix;
        Get prodcut of code as BitMatrix and Ht;
        Convert product to data; 
        From TA, create lookup table
        HAM_STATUS l_table[16] = {HAM_OK, 4, 5, HAM_ERR, 6, HAM_ERR, HAM_ERR, 3, 7, HAM_ERR, HAM_ERR, 2, HAM_ERR, 1, 0, HAM_ERR};
        Get result by cross referencing product to lookup table; 
        if (result is HAMM_OK) {
            set msg to lower nibble of code; 
            return result;
        }
        if (result is HAMM_ERR) {
            then return result;
        }
        
        // Flip bit of code at index given by result and return lower nibble of code;
    }


Helper functions for encdoe and decode
bm.c
    struct BitMatrix {
        uint32_t rows; 
        uint32_t cols; 
        BitVector *vector; 
    };

    BitMatrix *bm_create(uint32_t rows, uint32_t cols) {
        Allocate memory and fill array with 0's;
        if (calloc) { 
            set rows and columns;
        }
            Create vector; 
            if (vector is NULL) { 
                free s;
                return NULL;
            }
        }
        return s; 
    }

    void bm_delete(BitMatrix **m) {
        if (m and pointer m are not NULL) { 
            delete vector;
            free m;
            set poiinter to Null;
        }
        return;
    }

    uint32_t bm_rows(BitMatrix *m) {
        return m->rows;
    }

    uint32_t bm_cols(BitMatrix *m) {
        return m->cols;
    }

    void bm_set_bit(BitMatrix *m, uint32_t r, uint32_t c) {
        set rows and columns;
    }

    void bm_clr_bit(BitMatrix *m, uint32_t r, uint32_t c) {
        clear rows and colums;
    }

    uint8_t bm_get_bit(BitMatrix *m, uint32_t r, uint32_t c) {
        return rows and columns;
    }

    BitMatrix *bm_from_data(uint8_t byte, uint32_t length) {
        Make matrix 1 x columns;
        if (data) {
            data set with correct number of bits;
                }
            }
        }
        return data
    }

    uint8_t bm_to_data(BitMatrix *m) {
        for (b 0 to 8) {
            if (the bit at 0,b is 1) { 
                left shift on 1 and or that with data;
            }
        }
        return data;
    }

    Citing Eric's session
    BitMatrix *bm_multiply(BitMatrix *A, BitMatrix *B) {
        If matrix A and B can be multiplied;
        Make matrix product;
        Matrix A and B used to make product; 
        return product; 
    }

    void bm_print(BitMatrix *m) {
        Followed closely to previous assignments
        
    }


Helper functions for encdoe and decode
bv.c
    struct BitVector {
        uint32_t length; 
        uint8_t *vector;
    };

    BitVector *bv_create(uint32_t length) {
    Allocate memory and fill array with 0's;
    If (calloc) {
        then set rows and columns;
        If (divisible by 8) {
            make an even matrix;
        }
        else {
            add a byte make an odd matrix;
        }
        if (NULL) { 
            free s;
            set NULL;
        }
    }
    return s;
}

    void bv_delete(BitVector **v) {
        if (v or pointer v are NULL) {
            return;
            
        }
        Free memory;
        Set to NULL;
    }

    uint32_t bv_length(BitVector *v) {
        return v->length;
    }

    void bv_set_bit(BitVector *v, uint32_t i) {
        Set ith position to 1 != 1;
    }

    void bv_clr_bit(BitVector *v, uint32_t i) {
        Set bit i = 0;
    }

    void bv_xor_bit(BitVector *v, uint32_t i, uint8_t bit) {
        i XOR bit;
    }

    uint8_t bv_get_bit(BitVector *v, uint32_t i) {
        return bit = i;
    }

    void bv_print(BitVector *v) {
        Followed closely from previous assignments;
    }